/*
Copyright The Flagger Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta2 "github.com/weaveworks/flagger/pkg/apis/appmesh/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVirtualNodeLists implements VirtualNodeListInterface
type FakeVirtualNodeLists struct {
	Fake *FakeAppmeshV1beta2
	ns   string
}

var virtualnodelistsResource = schema.GroupVersionResource{Group: "appmesh.k8s.aws", Version: "v1beta2", Resource: "virtualnodelists"}

var virtualnodelistsKind = schema.GroupVersionKind{Group: "appmesh.k8s.aws", Version: "v1beta2", Kind: "VirtualNodeList"}

// Get takes name of the virtualNodeList, and returns the corresponding virtualNodeList object, and an error if there is any.
func (c *FakeVirtualNodeLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.VirtualNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(virtualnodelistsResource, c.ns, name), &v1beta2.VirtualNodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.VirtualNodeList), err
}

// List takes label and field selectors, and returns the list of VirtualNodeLists that match those selectors.
func (c *FakeVirtualNodeLists) List(ctx context.Context, opts v1.ListOptions) (result *v1beta2.VirtualNodeListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(virtualnodelistsResource, virtualnodelistsKind, c.ns, opts), &v1beta2.VirtualNodeListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.VirtualNodeListList), err
}

// Watch returns a watch.Interface that watches the requested virtualNodeLists.
func (c *FakeVirtualNodeLists) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(virtualnodelistsResource, c.ns, opts))

}

// Create takes the representation of a virtualNodeList and creates it.  Returns the server's representation of the virtualNodeList, and an error, if there is any.
func (c *FakeVirtualNodeLists) Create(ctx context.Context, virtualNodeList *v1beta2.VirtualNodeList, opts v1.CreateOptions) (result *v1beta2.VirtualNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(virtualnodelistsResource, c.ns, virtualNodeList), &v1beta2.VirtualNodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.VirtualNodeList), err
}

// Update takes the representation of a virtualNodeList and updates it. Returns the server's representation of the virtualNodeList, and an error, if there is any.
func (c *FakeVirtualNodeLists) Update(ctx context.Context, virtualNodeList *v1beta2.VirtualNodeList, opts v1.UpdateOptions) (result *v1beta2.VirtualNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(virtualnodelistsResource, c.ns, virtualNodeList), &v1beta2.VirtualNodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.VirtualNodeList), err
}

// Delete takes name of the virtualNodeList and deletes it. Returns an error if one occurs.
func (c *FakeVirtualNodeLists) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(virtualnodelistsResource, c.ns, name), &v1beta2.VirtualNodeList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVirtualNodeLists) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(virtualnodelistsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta2.VirtualNodeListList{})
	return err
}

// Patch applies the patch and returns the patched virtualNodeList.
func (c *FakeVirtualNodeLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta2.VirtualNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(virtualnodelistsResource, c.ns, name, pt, data, subresources...), &v1beta2.VirtualNodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.VirtualNodeList), err
}
