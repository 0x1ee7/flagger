/*
Copyright The Flagger Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/weaveworks/flagger/pkg/apis/appmesh/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualRouterListLister helps list VirtualRouterLists.
type VirtualRouterListLister interface {
	// List lists all VirtualRouterLists in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.VirtualRouterList, err error)
	// VirtualRouterLists returns an object that can list and get VirtualRouterLists.
	VirtualRouterLists(namespace string) VirtualRouterListNamespaceLister
	VirtualRouterListListerExpansion
}

// virtualRouterListLister implements the VirtualRouterListLister interface.
type virtualRouterListLister struct {
	indexer cache.Indexer
}

// NewVirtualRouterListLister returns a new VirtualRouterListLister.
func NewVirtualRouterListLister(indexer cache.Indexer) VirtualRouterListLister {
	return &virtualRouterListLister{indexer: indexer}
}

// List lists all VirtualRouterLists in the indexer.
func (s *virtualRouterListLister) List(selector labels.Selector) (ret []*v1beta2.VirtualRouterList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualRouterList))
	})
	return ret, err
}

// VirtualRouterLists returns an object that can list and get VirtualRouterLists.
func (s *virtualRouterListLister) VirtualRouterLists(namespace string) VirtualRouterListNamespaceLister {
	return virtualRouterListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualRouterListNamespaceLister helps list and get VirtualRouterLists.
type VirtualRouterListNamespaceLister interface {
	// List lists all VirtualRouterLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.VirtualRouterList, err error)
	// Get retrieves the VirtualRouterList from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.VirtualRouterList, error)
	VirtualRouterListNamespaceListerExpansion
}

// virtualRouterListNamespaceLister implements the VirtualRouterListNamespaceLister
// interface.
type virtualRouterListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualRouterLists in the indexer for a given namespace.
func (s virtualRouterListNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.VirtualRouterList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualRouterList))
	})
	return ret, err
}

// Get retrieves the VirtualRouterList from the indexer for a given namespace and name.
func (s virtualRouterListNamespaceLister) Get(name string) (*v1beta2.VirtualRouterList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("virtualrouterlist"), name)
	}
	return obj.(*v1beta2.VirtualRouterList), nil
}
