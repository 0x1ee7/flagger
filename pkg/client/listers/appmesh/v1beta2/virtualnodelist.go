/*
Copyright The Flagger Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/weaveworks/flagger/pkg/apis/appmesh/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualNodeListLister helps list VirtualNodeLists.
type VirtualNodeListLister interface {
	// List lists all VirtualNodeLists in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.VirtualNodeList, err error)
	// VirtualNodeLists returns an object that can list and get VirtualNodeLists.
	VirtualNodeLists(namespace string) VirtualNodeListNamespaceLister
	VirtualNodeListListerExpansion
}

// virtualNodeListLister implements the VirtualNodeListLister interface.
type virtualNodeListLister struct {
	indexer cache.Indexer
}

// NewVirtualNodeListLister returns a new VirtualNodeListLister.
func NewVirtualNodeListLister(indexer cache.Indexer) VirtualNodeListLister {
	return &virtualNodeListLister{indexer: indexer}
}

// List lists all VirtualNodeLists in the indexer.
func (s *virtualNodeListLister) List(selector labels.Selector) (ret []*v1beta2.VirtualNodeList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualNodeList))
	})
	return ret, err
}

// VirtualNodeLists returns an object that can list and get VirtualNodeLists.
func (s *virtualNodeListLister) VirtualNodeLists(namespace string) VirtualNodeListNamespaceLister {
	return virtualNodeListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualNodeListNamespaceLister helps list and get VirtualNodeLists.
type VirtualNodeListNamespaceLister interface {
	// List lists all VirtualNodeLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.VirtualNodeList, err error)
	// Get retrieves the VirtualNodeList from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.VirtualNodeList, error)
	VirtualNodeListNamespaceListerExpansion
}

// virtualNodeListNamespaceLister implements the VirtualNodeListNamespaceLister
// interface.
type virtualNodeListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualNodeLists in the indexer for a given namespace.
func (s virtualNodeListNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.VirtualNodeList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualNodeList))
	})
	return ret, err
}

// Get retrieves the VirtualNodeList from the indexer for a given namespace and name.
func (s virtualNodeListNamespaceLister) Get(name string) (*v1beta2.VirtualNodeList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("virtualnodelist"), name)
	}
	return obj.(*v1beta2.VirtualNodeList), nil
}
