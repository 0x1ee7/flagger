/*
Copyright The Flagger Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/weaveworks/flagger/pkg/apis/appmesh/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualServiceListLister helps list VirtualServiceLists.
type VirtualServiceListLister interface {
	// List lists all VirtualServiceLists in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.VirtualServiceList, err error)
	// VirtualServiceLists returns an object that can list and get VirtualServiceLists.
	VirtualServiceLists(namespace string) VirtualServiceListNamespaceLister
	VirtualServiceListListerExpansion
}

// virtualServiceListLister implements the VirtualServiceListLister interface.
type virtualServiceListLister struct {
	indexer cache.Indexer
}

// NewVirtualServiceListLister returns a new VirtualServiceListLister.
func NewVirtualServiceListLister(indexer cache.Indexer) VirtualServiceListLister {
	return &virtualServiceListLister{indexer: indexer}
}

// List lists all VirtualServiceLists in the indexer.
func (s *virtualServiceListLister) List(selector labels.Selector) (ret []*v1beta2.VirtualServiceList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualServiceList))
	})
	return ret, err
}

// VirtualServiceLists returns an object that can list and get VirtualServiceLists.
func (s *virtualServiceListLister) VirtualServiceLists(namespace string) VirtualServiceListNamespaceLister {
	return virtualServiceListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualServiceListNamespaceLister helps list and get VirtualServiceLists.
type VirtualServiceListNamespaceLister interface {
	// List lists all VirtualServiceLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.VirtualServiceList, err error)
	// Get retrieves the VirtualServiceList from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.VirtualServiceList, error)
	VirtualServiceListNamespaceListerExpansion
}

// virtualServiceListNamespaceLister implements the VirtualServiceListNamespaceLister
// interface.
type virtualServiceListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualServiceLists in the indexer for a given namespace.
func (s virtualServiceListNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.VirtualServiceList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.VirtualServiceList))
	})
	return ret, err
}

// Get retrieves the VirtualServiceList from the indexer for a given namespace and name.
func (s virtualServiceListNamespaceLister) Get(name string) (*v1beta2.VirtualServiceList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("virtualservicelist"), name)
	}
	return obj.(*v1beta2.VirtualServiceList), nil
}
